Procedural programming -> code as a sequence of steps, great for data analysis and scripts (download the data, process it and visualize it)

Object-oriented programming -> code as interactions of objects, great for building frameworks and tools (e.g. pandas DataFrame), maintainable and reusable code

Object = state + behavior
Encapsulation -> bundling data with code operating on it

Class -> blueprint for objects outlining possible states and behaviors

In Python, everything is an object (numbers, strings, DataFrames, functions), every object has a class
type() -> to find the class

import numpy as np
a = np.array([1,2,3,4])
print(type(a))  -> numpy.ndarray

State <-> attributes
Behavior <-> methods

a = np.array([1,2,3,4])
a.shape -> shape attribute
a.reshap(2,2) -> reshape method

Object = attributes + methods
attribute <-> variables  -> obj.attribute
method <-> function()  -> obj.method()

dir(a) -> to list all attributes and methods

Classes and objects both have attributes and methods, but the difference is that a class is an abstract template, while an object is a concrete representation of a class.

class Customer:
	# code for class goes here
	pass

	def identify(self, name):
		print("I am Customer " + name)

	def set_name(self, new_name):
		# create an attribute by assigning a value
		self.name = new_name  # will create .name when set_name is called
	
c1 = Customer()
c2 = Customer()

method definition = function definition within class, use self as the 1st argument in method definition, ignore self when calling method on an object

Classes are templates, objects of a class don't yet exist when a class is being defined, but we often need a way to refer to the data of a particular object within class definition. This is the purpose of self, it's a stand-in for the future object.

self -> stand-in for a particular object used in class definition, should be the first argument of any method. Python will take care of self when method called from an object.
cust.identify("Laura") will be interpreted as Customer.identify(cust, "Laura")

cust = Customer()  -> .name doesn't exist here yet
cust.set_name("Lara de Silva")  -> .name is created and set to "Lara de Silva"
print(cust.name)  -> .name can be used

Method -> function definitions within a class

Constructor -> __init__() method is called every time an object is created
__init__ constructor is a good place to set the default values for attributes

Attributes in the constructor:
class MyClass:
	def __init__(self, attr1, attr2):
		self.attr1 = attr1
		self.attr2 = attr2
		....
# all attributes are created
obj = MyClass(val1, val2)

__init__ constructor best practices:
1. initialize attributes in __init__()
2. naming -> CamelCase for classes, lower_snake_case for functions and attributes
3. keep self as self
4. use docstrings
class MyClass:
	"""This class does nothing"""
	pass

inheritance -> extending functionality of existing code
polymorphism -> creating a unified interface
encapsulation -> bundling of data and methods

Instance-level data:
class Employee:
	def __init__(self, name, salary):
		self.name = name
		self.salary = salary
emp1 = Employee("......", 50000)
emp2 = Employee("......", 65000)

name, salary are instance attributes, self binds to an instance

Class-level data -> data shared among all instances of a class, define class attributes in the body of class, no self
class MyClass:
	# define a class attribute
	CLASS_ATTR_NAME = attr_value  # this will serve as a global variable within a class, no self

CLASS_ATTR_NAME is shared among all instances

class Employee:
	# define a class attribute
	MIN_SALARY = 30000  # no self, class-level attribute
	def __init__(self, name, salary):
		self.name = name
		# use class name to access class attribute
		if salary >= Employee.MIN_SALARY:
			self.salary = salary
		else:
			self.salary = Employee.MIN_SALARY

emp1 = Employee("TBD", 40000)
print(emp1.MIN_SALARY)  -> we can access class-level attribute from an object instance, and the value will be the same across instances

Global constants related to the class -> minimal/maximal values for attributes, commonly used values and constants, e.g. pi for a Circle class

Class methods -> methods are already shared: same code for every instance, class methods can't use instance-level data

class MyClass:
	@classmethod	# use decorator to declare a class method
	def my_awesome_method(cls, args...):  # cls argument refers to the class
		# do stuff here
		# can't use any instance attributes

MyClass.my_awesome_method(args...)

Why we need class methods? -> the main use case is alternative constructors, a class can only have 1 __init__() method, but there might be multiple ways to initialize an object

class Employee:
	MIN_SALARY = 30000
	def __init__(self, name, salary=30000):
		self.name = name
		if salary >= Employee.MIN_SALARY:
			self.salary = salary
		else:
			self.salary = Employee.MIN_SALARY

	@classmethod
	def from_file(cls, filename):
		with open(filename,"r") as f:
			name = f.readline()
		return cls(name)  -> cls(....) will call __init__(....)

# create an employee without calling Employee()
emp = Employee.from_file("employee_data.txt")
type(emp) -> __main__.Employee

Python allows you to define class methods as well, using the @classmethod decorator and a special first argument cls. The main use of class methods is defining methods that return an instance of the class, but aren't using the same code as __init__().

There's another type of methods that are not bound to a class instance - static methods, defined with the decorator @staticmethod. They are mainly used for helper or utility functions that could as well live outside of the class, but make more sense when bundled into the class.

Object-oriented programming is fundamentally about code reuse:
1. someone has already done it -> modules like numpy, pandas, matplotlib, scikit-learn, scipy are great for fixed functionality, OOP is great for customizing functionality
2. DRY: don't repeat yourself

inheritance -> new class functionality = old class functionality + extra

Implementing class inheritance:
class MyChild(MyParent):
	.....
MyParent -> class whose functionality is being extended/inherited
MyChild -> class that will inherit the functionality and add more

Child class has all of the parent data -> is-a relationship
Inheritance represents is-a relationship

Customizing constructors -> can run constructor of the parent class first by Parent.__init__(self, args...), don't have to class the parent constructors

Adding functionality to child class -> methods can use the data from both the parent and the child class.

Class attributes can be inherited, and the value of class attributes can be overwritten in the child class.

Using *args and **kwargs allows you to not worry about keeping the signature of your customized method compatible. Notice how in the very last line, you called the parent method and passed an object to it that isn't self. When you call parent methods in the class, they should accept _some_ object as the first argument, and that object is _usually_ self, but it doesn't have to be.

Object equality:
customer1 == customer2  -> False (even they have the same attributes)

NumPy arrays are compared using their data with custom comparison:
import numpy as np
# 2 different arrays containing the same data
array1 = np.array([1,2,3])
array2 = np.array([1,2,3])
array1 == array2  -> True

How can we enforce for custom classes?: overloading __eq__()
class Customer:
	def __init__(self, id, name):
		self.id, self.name = id, name
	# will be called when == is used
	def __eq__(self, other):  -> __eq__() is called when 2 objects of a class are compared using ==
		# diagnostic printout
		print("__eq__() is called")
		# returns True if all attributes match
		return (self.id == other.id) and (self.name == other.name)

after __eq__() object equality:
customer1 == customer2  -> True

Other comparison operators:
==  ->  __eq__()
!=  ->  __ne__()
>=  ->  __ge__()
<=  ->  __le__()
>   ->  __gt__()
<   ->  __lt__()

__hash__() -> to use objects as dictionary keys and in sets

class Parent:
    def __eq__(self, other):
        print("Parent's __eq__() called")
        return True

class Child(Parent):
    def __eq__(self, other):
        print("Child's __eq__() called")
        return True

p = Parent()
c = Child()

p == c   -> Child's __eq__() called

Python always calls the _child's_ __eq__() method when comparing a child object to a parent object.

There are 2 methods that we can define in a class that will return a printable representation of an object: __str__(), __repr__()

Operator overloading:
__str__()  -> str(np.array([1,2,3])) -> [1 2 3]  -> str is informal, for end user, string representation
__repr__()  -> repr(np.array([1,2,3])) -> array([1,2,3]) -> repr is formal, for developers, reproducable representation, fallback for print()

The best practice is to use repr to print a string that can be used to reproduce the object.

class Customer:
	def __init__(self, name, balance):
		self.name, self.balance = name, balance

	def __str__(self):
		cust_str = ......
		return cust_str

""" -> to define multi-line strings

a = 1
a / 0  -> ZeroDivisionError: division by zero
a + "Hello" -> TypeError: unsupported operand type(s) for +: 'int' and 'str'

a = [1,2,3]
a[5]  -> IndexError: list index out of range

a = 1
a + b  -> NameError: name 'b' is not defined

Exception handling -> prevent the program from terminating when an exception is raised, try - except - finally

try:
	# try running some code
except ExceptionNameHere:
	# run this code if ExceptionNameHere happens
except AnotherExceptionHere:	# multiple except blocks
	# run this code if AnotherExceptionHere happens
....
finally:  # optional
	# run this code no matter what

Raising exceptions:
raise ExceptionNameHere('Error message here')

def make_list_of_ones(length):
	if length <= 0:
		raise ValueError("Invalid length!")  # will stop the program and raise an error
	return [1]*length

BaseException
+-- Exception
+-- ArithmeticError # <---
| +-- FloatingPointError
| +-- OverflowError
| +-- ZeroDivisionError # <---
+-- TypeError
+-- ValueError
| +-- UnicodeError
| +-- UnicodeDecodeError
| +-- UnicodeEncodeError
| +-- UnicodeTranslateError
+-- RuntimeError
...
+-- SystemExit
...

If you raise an exception inside an if statement, you don't need to add an else branch to run the rest of the code. Because raise terminates the function, the code after raise will only be executed if an exception did not occur.

except block for a parent exception will catch child exceptions

It's better to include an except block for a child exception before the block for a parent exception, otherwise the child exceptions will be always be caught in the parent block, and the except block for the child will never be executed.

Polymorphism -> using a unified interface to operate on objects of different classes

SOLID principles

Liskov substitution principle -> base class should be interchangeable with any of its subclasses without altering any properties of the program
Syntactically -> function signatures are compatible arguments, returned values
Semantically -> the state of the object and the program remains consistent, subclass method doesn't strengthen input conditions, subclass method doesn't weaken output conditions, no additional exceptions

Violating Liskov substitution principle:
1. syntactic incompatibility -> BankAccount.withdraw() requires 1 parameter, but CheckingAccount.withdraw() requires 2
2. subclass strengthening input conditions -> BankAccount.withdraw() accepts any amount, but CheckingAccount.withdraw() assumes that the amount is limited
3. subclass weakening output conditions -> BankAccount.withdraw() can only leave a positive balance or cause an error, CheckingAccount.withdraw() can leave balance negative

class Parent:
    def talk(self):
        print("Parent talking!")     

class Child(Parent):
    def talk(self):
        print("Child talking!")          

class TalkativeChild(Parent):
    def talk(self):
        print("TalkativeChild talking!")
        Parent.talk(self)


p, c, tc = Parent(), Child(), TalkativeChild()

for obj in (p, c, tc):
    obj.talk()

Parent talking!
Child talking!
Talkative Child talking!
Parent talking!      


# Define a Rectangle class
class Rectangle:
    def __init__(self, h, w):
      self.h, self.w = h, w

# Define a Square class
class Square(Rectangle):
    def __init__(self, w):
      self.h, self.w = w, w  

s = Square(4)
s.h = 7
print(s.h)  -> 7

The 4x4 Square object would no longer be a square if we assign 7 to h.

the substitution principle requires the substitution to preserve the oversall state of the program. An example of a program that would fail when this substitution is made is a unit test for a setter functions in Rectangle class.

class Rectangle:
    def __init__(self, w,h):
      self.w, self.h = w,h
      
# Define set_h to set h       
    def set_h(self, h):
      self.h = h

# Define set_w to set w
    def set_w(self, w):
      self.w = w   
      
class Square(Rectangle):
    def __init__(self, w):
      self.w, self.h = w, w 
      
# Define set_h to set w and h 
    def set_h(self, h):
      self.h = h
      self.w = h
      
# Define set_w to set w and h 
    def set_w(self, w):
      self.w = w   
      self.h = w

'''
Each of the setter methods of Square change both h and w attributes, while setter methods of Rectangle change only one attribute at a time, so the Square objects cannot be substituted for Rectangle into programs that rely on one attribute staying constant.
'''

Restricting access -> naming conventions, use @property to customize access, overriding __getattr__() and __setattr__()

Naming convention: internal attributes (obj._att_name, obj._method_name()) -> starts with a single _ (internal), not a part of the public API, as a class user: "don't touch this", as a class developer: use for implementation details, helper functions, etc.
df._is_mixed_type, datetime._ymd2ord()

pseudoprivate attributes -> obj.__attr_name, obj.__method_name() -> starts but doesn't end with __ (private), not inherited, name mangling: obj.__attr_name is interpreted as obj._MyClass__attr_name, used to prevent name clashes in inherited classes

__name -> a version attribute that stores the current version of the class and shouldn't be passed to child classes, who will have their own versions

Leading and trailing __ are only used for built-in Python methods (__init__(), __repr__())

Properties

# will cause an error
df.columns = ["new_colA", "new_colB", "extra"]
df  -> ValueError: Length mismatch:

df.shape = (43, 27) -> AttributeError: can't set attribute  -> read-only attribute

class Employer:
	def __init__(self, name, new_salary):
		self._salary = new_salary   # use protected attribute with leading _ to store data
	@property
	def salary(self):
		return self._salary

	@salary.setter
	def salary(self, new_salary):
		if new_salary < 0:
			raise ValueError("Invalid salary")
		self._salary = new_salary

emp = Employee(........)
emp.salary = 60000  # @salary.setter
emp.salary = -1000  -> ValueError: Invalid salary

use @property on a method whose name is exactly the name of the restricted attribute, return the internal attribute

use @attr.setter on a method attr() that will be called on obj.attr = value, the value to assign passed as argument

@attr.getter -> use for the method that is called when the property's value is retrieved
@attr.deleter -> use for the method that is called when the property is deleted using del

Properties control only one specific attribute that they're attached to.

- classes and objects
- attributes and methods

- class inheritance
- polymorphism
- class-level data and instance-level data

- object equality
- string representation
- exceptions

- designing for inheritance
- levels of data access
- properties

What's next?
Functionality:
- multiple inheritance and mix-in classes
- overriding built-in operators like +
- __getattr__(), __setattr__()
- custom iterators
- abstract base classes
- dataclasses
Design:
- SOLID principles
- design patterns








